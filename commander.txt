git저장소는 Working_Directory , Staging_Area , Repository 로 이루어져 있으며 
     *Working_Directory  : 내가 현재 작업하고 있는공간 자체
     *Staging_Area         : 버전이될 후보들의 공간
     *Repository            : 버전이 된 파일들의 공간

    **<> 는 내가 편하게 보기위해 나둔거니 다 <> 빼고 명령어 치자~~
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
							
								깃 기본	

버전관리 사용하겠다!(깃 사용하겠다)
  - git init

상태확인
  - git status

Staging area 에 올리겠다(버전이 될 후보들이 모이는 공간에 올리겠다)
  - git add 파일이름

Staging area 에 현재 디렉터리에 있는 파일을 모두 Staging Area에 올리겠다.
  - git add .

버전 등록을 완료하겠다. (Repository 저장소에 올라감)
  - git commit -m "커밋메세지"
  - git commit  후 콘솔창에 열리는 페이지에 직접작성 하는 방법도 있음

Staging area 등록 + 버전등록
  - git commit -am 커밋메세지
  * 이 명령어는 한번이라도 커밋한 파일에 대해서만 가능함!!!!!(주의)

현재 상호작용 가능한 원격저장소 목록 조회하기
  - git remote

현재 상호작용 가능한 원격저장소의 목록 조회하기( 단축이름 , url 둘다)
  - git remote -v
    (fetch , push 두개 다뜬다 , 당황하지 않기~~)

깃헙 원격 저장소에 푸시하는 방법
 -git remote add origin https://github.com/SeokSeokNa/myPage.git  
  (현재 로컬저장소와 상호작용할 원격저장소를 추가한다 , 그 원격 저장소의 이름은 "origin 이고 원격저장소의 url은 "https://github.com/SeokSeokNa/myPage.git" 다)
  
 -git branch -m main 
  (현재 브랜치 이름을  강제로  main 으로 변경)   , (main이라는 이름의 새로운 브랜치로 덮어써서 작업한다는 뜻)
  
 -git push -u origin main 
  (-u는 디폴트 명령어로  앞으로 git push 시  "origin" 이라는 단축이름을 가진 원격저장소에 현재 로컬저장소의 main 브랜치에것을 올리겠다)

깃헙 원격 저장소에 한번 푸시 후에는 변경사항이 있을경우
  - git push 명령어만 치면 된다

상호작용 하려고 추가해뒀던 원격저장소 지우기
  - git remote rm <원격 저장소 단축이름>

이전 commit으로 되돌리기(reset)
  - git reset --hard HEAD^     (workingDirectory , stagingArea , Repository 모두 한단계 전으로 되돌린다)
  - git reset --mixed HEAD^   (stagingArea , Repository 만 한단계 전으로 되돌린다)
    (git reset HEAD^)
  - git reset --soft HEAD^      (Repository 만 한단계 전으로 되돌린다)
  - "^" 개수에 따라  하나면 한단계전  두개면 두 단계전으로 되돌리며 개수는 커밋한 만큼 가능 ...

=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								브랜치

현재 존재하는 브랜치 보기
  - git branch (초록색은 현재 사용하고있는 브랜치를 뜻함)

브랜치 생성하기
  - git branch 브랜치이름   ( 단, 한번이라도 커밋한 상태에서만 새로운 브랜치 생성이 가능하다)

다른 브랜치로 들어가기
  - git checkout 브랜치 이름

브랜치 생성하면서 해당 브랜치로 들어가기
  - git checkout -b 브랜치 이름 

브랜치 삭제
  - git branch -d 브랜치 이름

각 브랜치 수정내용을 현재 작업 브랜치로  합치기
  - git merge 합치려는 브랜치이름



=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								이전 것 과 비교

"+" 비교대상에 비해 표시는 추가된것을 보여줌

이전 커밋에 비해 달라진게 궁금할때
  - git diff 비교할 커밋commit hash  기준 커밋commit hash  
      ex) git diff 3bae645be6c33265c3faa05eabead2442bd2c646 c8c43202846e60d7334602046d9ffa8fcd6d1cd6)
      즉) git diff <이 커밋에비해> <이 커밋은 무엇이 달라졌나?>

이전 커밋에 비해 달라진게 궁금할때 2번째방법 ( commit hash 쓰기 귀찮을떄 추천함)
   - git diff HEAD^ HEAD
     부가설명) HEAD는 가장최근 커밋을 뜻하고 HEAD^는 최근커밋에서 한단계전 커밋을 의미  , "^" 개수에 따라 단계가 내려감

아직 commit하지 않은 현재 작업 중인 내용을 가장 최근 commit한 내용과 비교
    - git diff HEAD


원격 저장소와 로컬 저장소 비교하기
  - git diff <비교대상 branch 이름> <origin/원격저장소 브랜치이름>
    부가설명) <> 는 내가 알아보기 쉽게 해놓은거라 빼고 해야함

브랜치간의 비교
   - git <비교대상 브랜치명> <기준 브랜치명>
     부가설명) <> 는 내가 알아보기 쉽게 해놓은거라 빼고 해야함




=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								revert 명령어

* 리셋과 가장 큰 차이점은 reset은 이력을 모두 삭제하면서 뒤로가지만 revert는 이력은 남겨두고 뒤로간다는 큰 차이점이 있다!!!
* 고로 reset보다 revert가 더 안전하게 되돌리는 방법이 된다

commit 되돌리기
  - git revert 되돌아가고 싶은 commit hash
    ex)git revert de6d5c1148981e15617999c7ecaa6ec2ea21ff29
    부가설명 git revert -n 옵션 사용시 reset 과 같이 commit이 삭제됨!!!!
    



=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								pull , fetch , clone
						   (깃헙 원격저장소에 내용을 로컬저장소 로 가져오기)
pull
  - git pull <원격저장소 단축이름> <현재 브랜치명>
    ( 해당 원격저장소에 있는 파일들을 현재 브랜치로 가지고 오겠다 , 원격저장소와 동기화 한다고 보자)
    ( pull은 현재 로컬저장소에 내용을 원격저장소 내용으로 덮어씌움  , MERGE)
    (push 명령어에 디폴트 명령어로 -u를 지정해뒀으면 pull 역시 git pull 만해도 해당 원격저장소와 동기화 할수있다)
    *<현재 브랜치명> 을 master -> main으로 해야함

fetch
   - git fetch <원격저장소 단축이름>
     (해당 원격저장소에 있는 파일들을 FETCH 브랜치로 가지고 오겠다 , pull 과 다르게 동기화는 아니고 파일 변경사항 확인만 하고싶을경우)
     (fetch는 로컬저장소에 내용을 원격저장소 내용으로 덮어씌우지 않음 , 즉 MERGE가 아니다 !!!!!!!)

fetch 했을때 변경 내역 확인하러가기
   - 브랜치를 변경하면 되는데 브랜치 이름이 <원격저장소 단축이름>/<원격 저장소 브랜치> or FETCH_HEAD
   - 그래서 브랜치 변경 명령어인 git checkout <원격저장소 단축이름>/<원격 저장소 브랜치> 해서 확인가능

clone
   - git clone <원격 저장소 url>
     (clone에 경우 원격저장소 이름으로 폴더형태로 받아지는데 폴더를 들어가면 받아진 파일들을 볼수있음)
     (clone은 상호작용할 원격저장소가 자동으로 추가되어있음  , 내가 clone 받은 원격저장소로 추가되어있음)
     (고로 원격저장소 추가 안해도됨)
    


=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								PullRequest

1. 협업하고자 하는 프로젝트에 가서 fork로 내 깃헙 원격저장소로 가져온다
2. git bash창을 켜서 원격저장소(내 원격저장소)로 부터 "Clone" 해온다.
3. 해당 프로젝트로 위치 이동 한 다음에 master에서 작업하는게 아니라 branch를 새로 딴다 (중요!!!!)
4. 새로 branch를 딴곳으로 브랜치를 이동하여 작업한다
5. push 할때는 git push <원격저장소> <새로 딴 브랜치> 로 해서 master로 부터 push 하지 않도록 하기 !!
6. 내 원격저장소 github 로 들어가면 pullrequest 버튼이 생기는데 눌러준다
7. pullRequest 를 수락할지 안 할지는 fork해왔던 협업프로젝트 원격저장소 주인이 결정함 ...
8. 수락하고 난 branch는 지워주는게 맞음 ( 내가 지우던 주인장이 지우던 )


*추가참고 
   - 작은 소규모(친구들 , 지인등..) 프로젝트 진행할시  깃헙 프로젝트 - settings - Manage access  - Invite a collaborator 버튼 - 초대 메일보내기 
     하는걸로 프로젝트를 같이 진행할수 있다(초대받은 사람은 프로젝트를 같이할수 있는 권한을 얻을수 있음 , push pull 등)
   - 대규모 프로젝트에는 어울리지 않음  


=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
=============================================================================================================================

								rebase
 					              (시작을 다시잡는다 , 조상을 변경한다)

*원격 저장소도 변했고 나도 변한경우 ..
*나는 master(main) 이 아닌 새로운 브랜치를 따서 작업하고 커밋하고 있었음 

  1. 내가 막 작업하고 있었는데 원격 저장소에 파일이 추가 되거나 다른 파일이 수정되거나 한 경우
  2. 작업 하고있던 master 가 아닌 새로운 브랜치에서 는 계속 해서 작업하고 있어도 된다.
  3. 깃헙에 들어가 봤더니 무언가 변해있더라 !!
  4. master 브랜치로 체크아웃 후 pull 로 변경사항을 merge 하자
  5. 그리고나서 내가 팠던 새로운 브랜치의 시작점을 변경하자 ( 그러면 충돌이 없을것이야 ) 
  5. 해당 브랜치(내가 팠던 새로운 브랜치) 로 체크아웃 후 다음 명령어로 시작점을 변경하자
  6. git rebase master(main이 맞을듯)
  7. 그러면 현재 내가 팠던 브랜치의 시작점이 원격저장소로 부터 pull 해서 merge 시켰던 부분으로 변경된다
     ( master 브랜치에는 pull 로 원격저장소와 merge 되어있고  그 master 브랜치와 내가 팠던 새로운 브랜치를 rebase 시켜서 시작점이 pull 한 시점으로 변경됨)